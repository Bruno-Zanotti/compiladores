# Sintactic Sugar

# Ejercicio 1

# Suma
let rec sum (m n:Nat):Nat = ifz n then m else succ (sum m (pred n))
# Resta
let rec res (m n:Nat):Nat = ifz n then m else pred (res m (pred n)) 
# MultiplicaciÃ³n
let rec mul (m n:Nat):Nat = ifz n then 0 else (ifz m then 0 else (sum m (mul m (pred n))))
# Potencia
let rec pow (m n:Nat):Nat = ifz n then 1 else mul m (pow m (pred n))
# Factorial
let rec fact (m:Nat):Nat  = ifz m then 1 else mul m (fact (pred m))
# Fibonacci
let rec fib (m:Nat):Nat   = ifz m then 0 else (ifz pred m then 1 else sum (fib (pred m)) (fib (pred (pred m))))
# Doble
let rec doble (m:Nat):Nat = ifz m then 0 else succ (succ (doble (pred m)))
# Ackermann
let rec ack (m:Nat) (n:Nat) : Nat = ifz m then succ n else (ifz n then ack (pred m) 1 else ack (pred m) (ack m (pred n)))

# Ejercicio 2

# Booleans:
type Bool = Nat
let true:Bool  = 0
let false:Bool = 1
let ifthenelse (c:Bool) (t1 t2:Nat):Nat = ifz c then t1 else t2
let and (a b:Bool):Bool = ifz a then (ifz b then 0 else 1) else 1
let or (a b:Bool):Bool  = ifz a then 0 else (ifz b then 0 else 1)
let not (a:Bool):Bool   = ifz a then 1 else 0
let xor (a b:Bool):Bool = or (and a b) (and (not a) (not b))

# Casos a revisar
let a:Nat->Nat = sum 3
# a 4